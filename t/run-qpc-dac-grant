#!/usr/bin/env bash
set -o nounset -o errexit -o errtrace -o pipefail

SCRIPT_DIR=$(dirname "${BASH_SOURCE[0]}")

# shellcheck source=../../../scripts/lib/bash-tap
source "${SCRIPT_DIR}"/../../../scripts/lib/bash-tap
TODO= # Define here to prevent unbound variable error from bash-tap.

function revert_updated_at() {
  local filename=$1
  # Modify the updated_at field to make it the same as the expected output.
  sed -i.bak 's/2024-05-09 14:06  20..-..-.. ..:../2024-05-09 14:06  2024-09-16 20:32/' "${filename}"
}

function test_qpc_user_fetch_all() {
  echo "# ##########"
  echo "# test_qpc_user_fetch_all"
  echo "# "

  if qpc user fetch-all >/dev/null 2>&1; then
    ok 1 "Running qpc user fetch-all succeeded."
  else
    ok 0 "Running qpc user fetch-all failed."
  fi
}

function test_qpc_dac_fetch_all_privileges() {
  echo "# ##########"
  echo "# test_qpc_dac_fetch_all_privileges"
  echo "# "

  if qpc dac fetch-all privileges >/dev/null 2>&1; then
    ok 1 "Running qpc dac fetch-all privileges succeeded."
  else
    ok 0 "Running qpc dac fetch-all privileges failed."
  fi
}

function test_qpc_dac_fetch_all_detailed_connections() {
  echo "# ##########"
  echo "# test_qpc_dac_fetch_all_detailed_connections"
  echo "# "

  if qpc dac fetch-all detailed-connections >/dev/null 2>&1; then
    ok 1 "Running qpc dac fetch-all detailed-connections succeeded."
  else
    ok 0 "Running qpc dac fetch-all detailed-connections failed."
  fi
}

function test_qpc_dac_grant_that_is_rejected_by_duplication() {
  local filename
  echo "# ##########"
  echo "# test_qpc_dac_grant_that_is_rejected_by_duplication"
  echo "# "

  filename=qpc-dac-grant-jk-readwrite-lucas-test.txt
  qpc dac grant "jk@chequer.io" "Read/Write" "lucas test" >/tmp/${filename} 2>&1 || true
  revert_updated_at /tmp/${filename}
  if diff /tmp/${filename} t/fixture_dac_grant/${filename} |
    sed 's/^/# /'; then
    ok 1 "Actual output is the same as the expected output."
  else
    ok 0 "Actual output is different from the expected output."
  fi
}

function test_qpc_dac_grant_that_does_dry_run() {
  local filename
  echo "# ##########"
  echo "# test_qpc_dac_grant_that_does_dry_run"
  echo "# "

  filename=qpc-dac-grant-jk-readwrite-lucas-test-dry-run.txt
  qpc dac grant "jk@chequer.io" "Read/Write" "lucas test" --dry-run >/tmp/${filename} 2>&1 || true
  revert_updated_at /tmp/${filename}
  if diff /tmp/${filename} t/fixture_dac_grant/${filename} |
    sed 's/^/# /'; then
    ok 1 "Actual output is the same as the expected output."
  else
    ok 0 "Actual output is different from the expected output."
  fi
}

function test_qpc_dac_grant_that_is_accepted_by_force() {
  local filename
  echo "# ##########"
  echo "# test_qpc_dac_grant_that_is_accepted_by_force"
  echo "# "

  filename=qpc-dac-grant-jk-readwrite-lucas-test-force.txt
  qpc dac grant "jk@chequer.io" "Read/Write" "lucas test" --force >/tmp/${filename} 2>&1 || true
  revert_updated_at /tmp/${filename}
  if diff /tmp/${filename} t/fixture_dac_grant/${filename} |
    sed 's/^/# /'; then
    ok 1 "Actual output is the same as the expected output."
  else
    ok 0 "Actual output is different from the expected output."
  fi
}

function main() {
  local num_of_tests=9
  plan tests ${num_of_tests}

  local top_dir basename
  top_dir=$(realpath "${SCRIPT_DIR}"/../)
  ok 1 "Detected top_dir=${top_dir}"

  basename=$(basename "${top_dir}")
  ok 1 "Detected basename=${basename}"

  pushd "${top_dir}" &>/dev/null
  is "$(pwd)" "${top_dir}" "I just changed the current working directory to ${top_dir}."

  export PATH=.:${PATH}

  # It is required to run these three commands before `qpc dac grant`.
  test_qpc_user_fetch_all
  test_qpc_dac_fetch_all_privileges
  test_qpc_dac_fetch_all_detailed_connections

  test_qpc_dac_grant_that_is_rejected_by_duplication
  test_qpc_dac_grant_that_does_dry_run
  test_qpc_dac_grant_that_is_accepted_by_force

  popd &>/dev/null

  done_testing ${num_of_tests}
}

main "$@"
