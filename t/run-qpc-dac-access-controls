#!/usr/bin/env bash
set -o nounset -o errexit -o errtrace -o pipefail

SCRIPT_DIR=$(dirname "${BASH_SOURCE[0]}")

# shellcheck source=../../../scripts/lib/bash-tap
source "${SCRIPT_DIR}"/../../../scripts/lib/bash-tap
TODO= # Define here to prevent unbound variable error from bash-tap.

function test_qpc_dac_fetch_all_access_controls() {
  local actual_header actual_output
  echo "# ##########"
  echo "# test_qpc_dac_fetch_all_access_controls"
  echo "# "

  actual_header=$(qpc dac fetch-all access-controls | head -1 || true)
  like "${actual_header}" "^UUID * USER_TYPE * AUTH_TYPE * NAME * MEMBERS * ADMIN_ROLE * CNT * LINKED *$" \
    "It should print a header line of UUID, USER_TYPE, AUTH_TYPE, NAME, MEMBERS, ADMIN_ROLE, CNT, LINKED."

  actual_output=$(qpc dac fetch-all access-controls | grep ChequerCrew | sed 's/   */\t/g' || true)
  IFS=$'\t'
  read -r UUID USER_TYPE AUTH_TYPE NAME MEMBERS ADMIN_ROLE CNT LINKED <<<"${actual_output}"

  like "${UUID}" "^[0-9a-f\-]{36}$" \
    "It should print output of ChequerCrew which UUID is an unspecified value."
  is "${USER_TYPE}" "GROUP" \
    "It should print output of ChequerCrew which USER_TYPE is GROUP."
  is "${AUTH_TYPE}" "Okta" \
    "It should print output of ChequerCrew which AUTH_TYPE is Okta."
  is "${NAME}" "ChequerCrew" \
    "It should print output of ChequerCrew which NAME is ChequerCrew."
  like "${MEMBERS}" "^\[.*\]$" \
    "It should print output of ChequerCrew which MEMBERS is a list of strings."
  is "${ADMIN_ROLE}" "NONE" \
    "It should print output of ChequerCrew which ADMIN_ROLE is NONE."
  like "${CNT}" "^[0-9]*$" \
    "It should print output of ChequerCrew which CNT is a number."
  like "${LINKED}" "^true|false$" \
    "It should print output of ChequerCrew which LINKED is a bool."
}

function test_qpc_dac_ls_access_controls() {
  local actual_header actual_output
  echo "# ##########"
  echo "# test_qpc_dac_ls_access_controls"
  echo "# "

  actual_header=$(qpc dac ls access-controls | head -1 || true)
  like "${actual_header}" "^UUID * USER_TYPE * AUTH_TYPE * NAME * MEMBERS * ADMIN_ROLE * CNT * LINKED *$" \
    "It should print a header line of UUID, USER_TYPE, AUTH_TYPE, NAME, MEMBERS, ADMIN_ROLE, CNT, LINKED."

  actual_output=$(qpc dac ls access-controls | grep ChequerCrew | sed 's/   */\t/g' || true)
  IFS=$'\t'
  read -r UUID USER_TYPE AUTH_TYPE NAME MEMBERS ADMIN_ROLE CNT LINKED <<<"${actual_output}"

  like "${UUID}" "^[0-9a-f\-]{36}$" \
    "It should print output of ChequerCrew which UUID is an unspecified value."
  is "${USER_TYPE}" "GROUP" \
    "It should print output of ChequerCrew which USER_TYPE is GROUP."
  is "${AUTH_TYPE}" "Okta" \
    "It should print output of ChequerCrew which AUTH_TYPE is Okta."
  is "${NAME}" "ChequerCrew" \
    "It should print output of ChequerCrew which NAME is ChequerCrew."
  like "${MEMBERS}" "^\[.*\]$" \
    "It should print output of ChequerCrew which MEMBERS is a list of strings."
  is "${ADMIN_ROLE}" "NONE" \
    "It should print output of ChequerCrew which ADMIN_ROLE is NONE."
  like "${CNT}" "^[0-9]*$" \
    "It should print output of ChequerCrew which CNT is a number."
  like "${LINKED}" "^true|false$" \
    "It should print output of ChequerCrew which LINKED is a bool."
}

function compare_qpc_dac_fetch_all_access_controls_and_qpc_dac_ls_access_controls() {
  echo "# ##########"
  echo "# compare_qpc_dac_fetch_all_access_controls_and_qpc_dac_ls_access_controls"
  echo "# "
  qpc dac fetch-all access-controls >/tmp/qpc_dac_fetch_all_access_controls.$$ 2>&1
  qpc dac ls access-controls >/tmp/qpc_dac_ls_access_controls.$$ 2>&1
  if diff /tmp/qpc_dac_fetch_all_access_controls.$$ /tmp/qpc_dac_ls_access_controls.$$ |
    sed 's/^/# /'; then
    ok 1 "qpc dac fetch-all access-controls and qpc dac ls access-controls are the same."
  else
    ok 0 "qpc dac fetch-all access-controls and qpc dac ls access-controls are different."
  fi
  # Clean up temporary files
  rm -f /tmp/qpc_dac_fetch_all_access_controls.$$ /tmp/qpc_dac_ls_access_controls.$$
}

function main() {
  local num_of_tests=22
  plan tests ${num_of_tests}

  local top_dir basename
  top_dir=$(realpath "${SCRIPT_DIR}"/../)
  ok 1 "Detected top_dir=${top_dir}"

  basename=$(basename "${top_dir}")
  ok 1 "Detected basename=${basename}"

  pushd "${top_dir}" &>/dev/null
  is "$(pwd)" "${top_dir}" "I just changed the current working directory to ${top_dir}."

  export PATH=.:${PATH}
  test_qpc_dac_fetch_all_access_controls
  test_qpc_dac_ls_access_controls
  compare_qpc_dac_fetch_all_access_controls_and_qpc_dac_ls_access_controls

  popd &>/dev/null

  done_testing ${num_of_tests}
}

main "$@"
