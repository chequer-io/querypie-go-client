#!/usr/bin/env bash
set -o nounset -o errexit -o errtrace -o pipefail

SCRIPT_DIR=$(dirname "${BASH_SOURCE[0]}")

# shellcheck source=../../../scripts/lib/bash-tap
source "${SCRIPT_DIR}"/../../../scripts/lib/bash-tap
TODO= # Define here to prevent unbound variable error from bash-tap.

function test_qpc_exists() {
  local qpc
  qpc=$(command -v qpc || true)
  like "${qpc}" "/qpc$" "It should find \`qpc\` at \`${qpc}\`."
}

function test_qpc_config_querypie() {
  local actual_header actual_output

  actual_header=$(qpc config querypie 2>/dev/null | head -1 || true)
  like "${actual_header}" "^NAME * BASE_URL * ACCESS_TOKEN * STATUS$" \
    "It should print a header line of NAME, BASE_URL, ACCESS_TOKEN, STATUS."

  actual_output=$(qpc config querypie 2>/dev/null | grep internal | sed 's/   */\t/g' || true)
  IFS=$'\t'
  read -r NAME BASE_URL ACCESS_TOKEN STATUS<<< "${actual_output}"

  # internal.querypie.io[*]
  is "${NAME}" "internal.querypie.io[*]" \
    "It should print an output of internal.querypie.io which name is marked as default."

  # https://internal.querypie.io
  is "${BASE_URL}" "https://internal.querypie.io" \
    "It should print an output of internal.querypie.io which url has no trailing /."

  # ap5bbb2a2f-****-****-****-************
  like "${ACCESS_TOKEN}" "^[0-9a-z]{10}-\*{4}-\*{4}-\*{4}-\*{12}$" \
    "It should print an output of internal.querypie.io which access token is masked."

  like "${STATUS}" "^(OK|FAIL)$" \
    "It should print an output of internal.querypie.io which status is OK or FAIL."
}

function main() {
  local num_of_tests=9
  plan tests ${num_of_tests}

  local top_dir basename
  top_dir=$(realpath "${SCRIPT_DIR}"/../)
  ok 1 "Detected top_dir=${top_dir}"

  basename=$(basename "${top_dir}")
  ok 1 "Detected basename=${basename}"

  pushd "${top_dir}" &>/dev/null
  is "$(pwd)" "${top_dir}" "I just changed the current working directory to ${top_dir}."

  export PATH=.:${PATH}
  test_qpc_exists
  test_qpc_config_querypie

  popd &>/dev/null

  done_testing ${num_of_tests}
}

main "$@"
