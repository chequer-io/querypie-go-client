#!/usr/bin/env bash
set -o nounset -o errexit -o errtrace -o pipefail

SCRIPT_DIR=$(dirname "${BASH_SOURCE[0]}")

# shellcheck source=../../../scripts/lib/bash-tap
source "${SCRIPT_DIR}"/../../../scripts/lib/bash-tap
TODO= # Define here to prevent unbound variable error from bash-tap.

function test_qpc_exists() {
  local qpc
  qpc=$(command -v qpc || true)
  like "${qpc}" "/qpc$" "It should find \`qpc\` at \`${qpc}\`."
}

function test_qpc_version() {
  local version
  version=$(qpc version)
  like "${version}" "^qpc version [0-9]+\.[0-9]+\.[0-9]+" "It should print version string."
}

function test_qpc_shows_help() {
  local header footer expected actual

  header=$(qpc | head -1 || true)
  is "${header}" "QueryPie Client for Operation - you can manage resources, access control policies" \
    "It should print a header, QueryPie Client for Operation."
  footer=$(qpc | tail -1 || true)
  is "${footer}" "Use \"qpc [command] --help\" for more information about a command." \
    "It should print a footer, qpc [command] --help"

  expected="Available Commands:
  dac         Manage DAC resources
  user        Manage user accounts with QueryPie API v2
  user-v1     Manage user accounts with QueryPie API v0.9
  config      Show detailed configuration for a specific key
  version     Print the version of QueryPie Client for Operation
  help        Help about any command
  completion  Generate the autocompletion script for the specified shell

Flags:"
  actual=$(qpc | grep --after-context=9 "Available Command")
  is "${actual}" "${expected}" "It should print available commands."
}

function main() {
  local num_of_tests=8
  plan tests ${num_of_tests}

  local top_dir basename
  top_dir=$(realpath "${SCRIPT_DIR}"/../)
  ok 1 "Detected top_dir=${top_dir}"

  basename=$(basename "${top_dir}")
  ok 1 "Detected basename=${basename}"

  pushd "${top_dir}" &>/dev/null
  is "$(pwd)" "${top_dir}" "I just changed the current working directory to ${top_dir}."

  export PATH=.:${PATH}
  test_qpc_exists
  test_qpc_version
  test_qpc_shows_help

  popd &>/dev/null

  done_testing ${num_of_tests}
}

main "$@"
